// Generated by CoffeeScript 1.8.0
(function() {
  var Collection, Model, d3, findFiles, fs, loadFiles;

  fs = require('fs');

  d3 = require('d3');

  findFiles = function(dir, callback) {
    var callbackCount, done, err, fileList, recurse;
    fileList = [];
    err = [];
    callbackCount = 0;
    done = function() {
      callbackCount--;
      if (callbackCount === 0) {
        if (err.length === 0) {
          err = null;
        }
        return callback(err, fileList);
      }
    };
    recurse = function(path) {
      callbackCount++;
      return fs.readdir(path, function(e1, files) {
        var file, _fn, _i, _len;
        if (e1 != null) {
          err.push(e1);
          done();
          return;
        }
        _fn = function(file) {
          var f;
          f = "" + path + "/" + file;
          callbackCount++;
          return fs.stat(f, function(e2, stats) {
            if (e2 != null) {
              err.push(e2);
              done();
              return;
            }
            if (stats.isDirectory()) {
              recurse(f);
            } else if (stats.isFile()) {
              fileList.push(f);
            }
            return done();
          });
        };
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (file[0] === '.') {
            continue;
          }
          _fn(file);
        }
        return done();
      });
    };
    return recurse(dir);
  };

  loadFiles = function(options, callback) {
    var err, files, n, next, objs;
    objs = null;
    files = [];
    err = [];
    n = 0;
    next = (function(_this) {
      return function() {
        var collection;
        if (n >= files.length) {
          if (err.length === 0) {
            err = null;
          }
          callback(err, objs);
          return;
        }
        collection = new Collection({
          model: options.model,
          file: files[n],
          separator: options.separator
        });
        return collection.read(function(e, obj) {
          if (e != null) {
            err.push(e);
          } else {
            if (objs == null) {
              objs = obj;
            } else {
              objs.merge(obj);
            }
          }
          n++;
          return next();
        });
      };
    })(this);
    return findFiles(options.path, function(e, f) {
      err = e;
      if (err == null) {
        err = [];
      }
      files = f;
      return next();
    });
  };

  Collection = (function() {
    function Collection(options) {
      this.separator = options.separator;
      this.model = new options.model;
      this.file = options.file;
      this.parser = this._getParser(this.separator);
    }

    Collection.prototype._getParser = function(separator) {
      if (separator === ",") {
        return d3.csv.parseRows;
      } else if (separator === "\t") {
        return d3.tsv.parseRows;
      } else {
        return d3.dsv(separator, "text/plain").parseRows;
      }
    };

    Collection.prototype.read = function(callback) {
      return fs.readFile(this.file, {
        encoding: 'utf8'
      }, (function(_this) {
        return function(e1, data) {
          var e2, e3;
          console.log('file read');
          data = "" + data;
          console.log("in string");
          if (e1 != null) {
            callback({
              msg: "Error reading file: " + _this.file,
              err: e1
            }, null);
            return;
          }
          try {
            data = _this.parser("" + data);
          } catch (_error) {
            e2 = _error;
            callback({
              msg: "Error parsing file: " + _this.file,
              err: e2
            }, null);
            return;
          }
          console.log("parsing");
          try {
            _this.model.load(_this, data);
          } catch (_error) {
            e3 = _error;
            throw e3;
            callback({
              msg: "Error loading file: " + _this.file,
              err: e3
            }, null);
            return;
          }
          return callback(null, _this.model);
        };
      })(this));
    };

    return Collection;

  })();

  Model = (function() {
    function Model() {
      this._init.apply(this, arguments);
    }

    Model.prototype._initialize = [];

    Model.initialize = function(func) {
      this.prototype._initialize = this.prototype._initialize.slice();
      return this.prototype._initialize.push(func);
    };

    Model.prototype._init = function() {
      var init, _i, _len, _ref, _results;
      _ref = this._initialize;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        init = _ref[_i];
        _results.push(init.apply(this, arguments));
      }
      return _results;
    };

    Model.include = function(obj) {
      var k, v, _results;
      _results = [];
      for (k in obj) {
        v = obj[k];
        if (this.prototype[k] == null) {
          _results.push(this.prototype[k] = v);
        }
      }
      return _results;
    };

    Model.prototype.model = 'Model';

    Model.prototype._defaults = {};

    Model.defaults = function(defaults) {
      var k, v, _results;
      this.prototype._defaults = JSON.parse(JSON.stringify(this.prototype._defaults));
      _results = [];
      for (k in defaults) {
        v = defaults[k];
        _results.push(this.prototype._defaults[k] = v);
      }
      return _results;
    };

    Model.initialize(function(options) {
      var k, _results;
      this.collections = [];
      this.values = {};
      this.length = 0;
      _results = [];
      for (k in this._defaults) {
        _results.push(this.values[k] = []);
      }
      return _results;
    });

    Model.prototype.save = function(callback) {};

    Model.prototype._getParser = function(key) {
      switch (this._defaults[key].type) {
        case 'string':
          return function(x) {
            return x;
          };
        case 'number':
          return parseInt;
        case 'decimal':
          return parseFloat;
      }
    };

    Model.prototype.load = function(collection, data) {
      var c, columns, e, header, i, k, parser, v, values, _i, _len, _ref;
      if (!(data.length > 1)) {
        return;
      }
      columns = {};
      header = data[0];
      for (c = _i = 0, _len = header.length; _i < _len; c = ++_i) {
        k = header[c];
        if (this._defaults[k] != null) {
          columns[k] = c;
        }
      }
      for (k in columns) {
        c = columns[k];
        i = 1;
        values = this.values[k];
        parser = this._getParser(k);
        while (i < data.length) {
          try {
            values.push(parser(data[i][c]));
          } catch (_error) {
            e = _error;
            throw e;
          }
          ++i;
        }
      }
      _ref = this._defaults;
      for (k in _ref) {
        v = _ref[k];
        if (!(columns[k] == null)) {
          continue;
        }
        i = 1;
        values = this.values[k];
        v = this._defaults[k]["default"];
        while (i < data.length) {
          values.push(v);
          ++i;
        }
      }
      this.collections.push({
        collection: collection,
        from: this.length,
        to: this.length + data.length - 1
      });
      return this.length += data.length - 1;
    };

    Model.prototype.merge = function(model) {
      var c, k, _i, _len, _ref, _results;
      if (model.model !== this.model) {
        throw new Error('Incompatible merge');
      }
      _ref = model.collections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        this.collections.push({
          collection: c.collection,
          from: c.from + this.length,
          to: c.to + this.length
        });
      }
      this.length += model.length;
      _results = [];
      for (k in this._defaults) {
        _results.push(this.values[k] = this.values[k].concat(model.values[k]));
      }
      return _results;
    };

    return Model;

  })();

  exports.Database = Database;

  exports.Model = Model;

  exports.loadFiles = loadFiles;

}).call(this);
